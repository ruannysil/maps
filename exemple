// 'use client';

// import 'leaflet/dist/leaflet.css';
// import { useEffect, useMemo, useState } from 'react';
// import { getAllLocations, postLocation, getRandomLocation, } from './services/locationService';
// import toast from 'react-hot-toast';
// import Buttons from './_components/Buttons';
// import ButtonsColorMaps from './_components/ButtonsColorMaps';
// import Map from './_components/Map';

// export interface Person {
//   id: number;
//   name: string;
//   latitude: number;
//   longitude: number;
//   status: 'online' | 'offline';
//   ultimaRequisicao: string;
// }

// export interface MapsProps {
//   people: { latitude: number; longitude: number; status: string; ultimaRequisicao: string }[]
//   center: { latitude: number; longitude: number },
// }

// const tileLayers = {
//   default: {
//     url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
//     attribution: '&copy; OpenStreetMap contributors',
//   },
//   dark: {
//     url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
//     attribution: '&copy; <a href="https://carto.com/">CARTO</a>',
//   },
//   light: {
//     url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
//     attribution: '&copy; <a href="https://carto.com/">CARTO</a>',
//   },
//   smoothDark: {
//     url: 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',
//     attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>',
//   },
// } as const;

// type MapStyle = keyof typeof tileLayers;

// export default function Home() {
//   const [mapView, setMapView] = useState<MapStyle>('default')
//   const [people, setPeople] = useState<Person[]>([]);
//   const [search, setSearch] = useState('');
//   const [statusFilter, setStatusFilter] = useState<'all' | 'online' | 'offline'>('all');
//   const [dateTime, setDateTime] = useState(new Date());
//   const [showInfo, setShowInfo] = useState(false);

//   useEffect(() => {
//     const savedStyle = localStorage.getItem('mapStyle') as MapStyle | null;
//     if (savedStyle && tileLayers[savedStyle]) {
//       setMapView(savedStyle);
//     }
//   }, [])

//   useEffect(() => {
//     if (typeof window !== 'undefined') {
//       const L = require('leaflet');

//       delete L.Icon.Default.prototype._getIconUrl;

//       L.Icon.Default.mergeOptions({
//         iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
//         iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
//         shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
//       });
//     }
//   }, []);

//   useEffect(() => {
//     const interval = setInterval(() => {
//       setDateTime(new Date());
//     }, 1000);

//     return () => clearInterval(interval);
//   }, []);

//   const handleChangeStyle = (style: any) => {
//     setMapView(style);
//     localStorage.setItem('mapStyle', style);
//   };

//   const formatedDate = dateTime.toLocaleString('pt-BR', {
//     year: 'numeric',
//     month: '2-digit',
//     day: '2-digit',
//   });

//   const formatedTime = dateTime.toLocaleString('pt-BR', {
//     hour: '2-digit',
//     minute: '2-digit',
//     second: '2-digit',
//   });

//   const fetchLocations = async (random: boolean = false) => {
//     try {
//       const data = random ? await getRandomLocation() : await getAllLocations();
//       if (Array.isArray(data)) {
//         setPeople(data);
//       } else if (data) {
//         setPeople([data]);
//       }

//     } catch (error) {
//       console.error('Erro ao buscar localizações:', error);
//     }
//   };

//   const postMyLocation = async () => {
//     if (typeof window !== 'undefined' && navigator.geolocation) {
//       navigator.geolocation.getCurrentPosition(
//         async (position) => {
//           const { latitude, longitude } = position.coords;
//           try {
//             await toast.promise(
//               postLocation({ latitude, longitude }),
//               {
//                 loading: 'Saving...',
//                 success: <b>Minha Localização</b>,
//                 error: <b>Could not save.</b>,
//               }
//             );
//             fetchLocations();
//           } catch (err) {
//             console.error(err);
//             alert('Erro ao enviar localização.');
//           }
//         },
//         (error) => {
//           console.error(error);
//           alert('Erro ao obter sua localização.');
//         }
//       );
//     } else {
//       alert('Geolocalização não suportada pelo navegador.');
//     }
//   };

//   useEffect(() => {
//     if (typeof window !== 'undefined') {
//       fetchLocations();
//     }
//   }, []);


//   const handleLactionRandom = async () => {
//     await toast.promise(
//       fetchLocations(true),
//       {
//         loading: 'Saving...',
//         success: <b>Localização Aleatória!</b>,
//         error: <b>Could not save.</b>,
//       }
//     )
//   }

//   const filteredPeople = useMemo(() => {
//     return people.filter((person) => {
//       const matchStatus = statusFilter === 'all' || person.status === statusFilter;
//       const matchName = person?.name?.toLowerCase().includes(search.toLowerCase());
//       return person.latitude !== 0 && person.longitude !== 0 && matchStatus && matchName;
//     });
//   }, [people, search, statusFilter]);

//   const center = useMemo(() => {
//     return filteredPeople.length > 0
//       ? {
//         latitude: filteredPeople[0].latitude,
//         longitude: filteredPeople[0].longitude,
//       }
//       : {
//         latitude: -14.235,
//         longitude: -51.925,
//       };
//   }, [filteredPeople]);


//   const handleShowInfo = () => {
//     setShowInfo(!showInfo);
//   };

// const handleSearch = async () => {
  //   try {
  //     const coords = await getCoodenationFromAddress(address);
  //     if (!coords) return;

  //     const locationData: LocationSearch = {
  //       address: address as string,
  //       latitude: coords.lat,
  //       longitude: coords.lng,
  //       status: 'online',
  //       ultimaRequisicao: new Date().toISOString(),
  //     }
  //     await postLocation(locationData);
  //     toast.success('Localização enviada com sucesso!');
  //     fetchLocations();
  //   } catch (err) {
  //     console.error('Erro ao enviar seus dados', err)
  //   }
  // }

  //   const getCoodenationFromAddress = async (address: string) => {
  //   try {
  //     const res = await axios.get(` https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
  //     const data = await res.data;

  //     console.log('informacoes recebida', data)
  //     if (data.length > 0) {
  //       const { lat, lon } = data[0];
  //       return { lat: parseFloat(lat), lng: parseFloat(lon) };
  //     } else {
  //       throw new Error("Endereço não encontrado");
  //     }

  //   } catch (err) {
  //     console.error("Erro", err)
  //   }
  // }


//   return (
//     <div className="flex-1 max-w-6xl items-center justify-center mx-auto px-4">
//       <h1 className='font-bold text-xl flex justify-end mb-10 mt-2'>{formatedTime}</h1>
//       <div className="text-center ">
//         <h2 className="text-2xl font-bold">GPS EYZE</h2>
//         <p className="text-sm text-gray-200 mb-5">Controle absoluto na ponta dos dedos.</p>
//  <div className="flex gap-2 items-center justify-between my-6">
        //   <input
        //     type="text"
        //     placeholder="Digite o endereço"
        //     value={address}
        //     onChange={(e) => setAddress(e.target.value)}
        //     className="border px-4 w-full py-2 rounded-md w-80"
        //   />
        //   <button
        //     onClick={handleSearch}
        //     className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
        //   >
        //     Buscar
        //   </button>
        // </div>

//         <div className='flex flex-col items-start gap-5'>
//           <h1 className='font-bold'>Alterar cor do Map:</h1>
//           <ButtonsColorMaps handleChangeStyle={handleChangeStyle} mapView={mapView} />
//           <div className="flex flex-wrap gap-2 mb-4 justify-center">

//             <Buttons label="Buscar Localização Aleatória" onClick={() => handleLactionRandom()} className='bg-blue-500 px-4 py-2 text-white rounded-md shadow-md' />

//             {/* <Buttons label="Buscar Localização Aleatória" onClick={() => fetchLocations(true)} className='bg-purple-500 px-4 py-2 text-white rounded-md shadow-md' /> */}

//             <Buttons label="Enviar Minha Localização" onClick={postMyLocation} className='bg-pink-500 px-4 py-2 text-white rounded-md shadow-md' />

//           </div>
//         </div>


//         {showInfo && (
//           <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-6'>
//             {filteredPeople.map((person, index) => (
//               <div key={index} className="flex w-full">
//                 <div className="space-y-1 bg-gray-800 p-3 rounded-md w-full text-start">
//                   {/* <div className="font-bold">{person.name}</div> */}
//                   <div>Lat: {person.latitude}</div>
//                   <div>Lng: {person.longitude}</div>
//                   <div className="flex justify-start items-center gap-2">
//                     <span className={`h-3 w-3 rounded-full ${person.status === 'online' ? 'bg-green-500' : 'bg-red-500'}`} />
//                     {person.status}
//                   </div>
//                   <div className="text-xs">
//                     {new Date(person.ultimaRequisicao).toLocaleString()}
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         )}

//        <Map people={people as Person[]} center={center} mapView={mapView} tileLayers={tileLayers} />
//       </div>
//     </div>
//   );
// }

